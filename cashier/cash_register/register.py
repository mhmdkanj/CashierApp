import math
import datetime
from collections import namedtuple
from cashier.cash_register.tax_office import TaxOffice
from cashier.cash_register.utils import truncate

PriceInfo = namedtuple('PriceInfo', 'price tax')


class Receipt:
    """Models a receipt generated by a cash register."""

    def __init__(self, items=None):
        self.time = datetime.datetime.now()  # date and time of purchase
        self.items = dict() if items is None else items  # items on the receipt
        self.total_sales_tax = 0
        self.total_price = 0

    def add_item(self, item, price, sales_tax):
        # calculate final price for item (for all quantities)
        # truncate trailing float error
        taxed_price = truncate(price + sales_tax)
        # TODO: handle when item already exists
        self.items[item] = PriceInfo(taxed_price, sales_tax)

    def remove_item(self, item):
        del self.items[item]

    def finish_receipt(self):
        # compute and store the total price and sales tax for items on receipt
        # this method designates the end of the receipt generation process

        total_sales_tax = 0
        total_price = 0
        # get total values by summing those for each item
        for taxed_price, sales_tax in self.items.values():
            total_sales_tax += sales_tax
            total_price += taxed_price
        self.total_price = truncate(total_price)
        self.total_sales_tax = truncate(total_sales_tax)

    def get_items(self):
        return self.items


class Register:
    """Models a cash register that generates a receipt."""

    def __init__(self):
        # start with empty receipt
        self.reset()

    def process_item(self, item):
        # add item to receipt

        if self.receipt is None:
            self.receipt = Receipt()
        tax_rate = TaxOffice.calculate_tax_rate(category=item.category, imported=item.imported)
        price = item.price * item.quantity  # untaxed price for all quantities
        sales_tax = price * tax_rate  # sales tax for all quantities
        sales_tax = self.round_up(sales_tax)  # round sales tax up to nearest 0.05

        self.receipt.add_item(item, price, sales_tax)

    def delete_item(self, item):
        if self.receipt is not None:
            self.receipt.remove_item(item)

    def get_receipt(self):
        # triggers end of receipt generation
        if self.receipt is not None:
            self.receipt.finish_receipt()  # calculates total values
        receipt = self.receipt
        # start next process with empty receipt
        self.reset()
        return receipt

    def reset(self):
        self.receipt = None

    @staticmethod
    def round_up(number, fraction=0.05):
        # round number up to nearest fraction
        rounded_up = math.ceil(number / fraction) * fraction
        # truncate rounded number so that only two decimal places remain
        return round(rounded_up, -int(math.floor(math.log10(fraction))))
